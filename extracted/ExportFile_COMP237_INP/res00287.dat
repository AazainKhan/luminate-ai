<?xml version="1.0" encoding="UTF-8"?>
<CONTENT id="_800649_1"><TITLE value="Topic 3.1: The search problem"/><TITLECOLOR value="#000000"/><DESCRIPTION
   value=""/><BODY><TEXT>&lt;div data-layout-row="c6e921af-1726-4c47-be3d-4365042354d3"&gt;&lt;div data-layout-column="54f331c0-236f-4654-87a1-142e7e9febc6" data-layout-column-width="12"&gt;&lt;div data-bbid="bbml-editor-id_42fbc008-eb3b-48eb-b1f0-a1a30b853268"&gt;&lt;h4&gt;Topic 3.1: The search problem&lt;/h4&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #1c8845"&gt;Problem solving agents&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;When the correct action to take is not immediately obvious, an agent may need to &lt;span style="color: #000000"&gt;&lt;strong&gt;plan ahead&lt;/strong&gt;&lt;/span&gt;, to consider a &lt;span style="color: #000000"&gt;&lt;strong&gt;sequence of actions&lt;/strong&gt;&lt;/span&gt; that forms a path to a &lt;span style="color: #000000"&gt;&lt;strong&gt;goal state&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Such an agent is called a&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;&lt;strong&gt;&amp;nbsp;"problem solving agent"&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;and the computational process it undertakes is called &lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;&lt;strong&gt;"Search"&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692628_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Problem-solving-agents. Ref : http://ai.berkeley.edu/home.html  &amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M2_search.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:427.7125244140625,&amp;quot;height&amp;quot;:321.2361429137158}"&gt;M2_search.png&lt;/a&gt;&lt;/p&gt;&lt;h6&gt;In this module we will cover &lt;strong&gt;problem solving agents&lt;/strong&gt;&amp;nbsp;operating in environments that are simple as follows:&lt;/h6&gt;&lt;ol&gt;&lt;li&gt;episodic&lt;/li&gt;&lt;li&gt;deterministic&lt;/li&gt;&lt;li&gt;observable&lt;/li&gt;&lt;li&gt;static&lt;/li&gt;&lt;li&gt;discrete&lt;/li&gt;&lt;li&gt;single agent&lt;/li&gt;&lt;li&gt;fully observable&lt;/li&gt;&lt;li&gt;completely known&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In such cases, the agent can construct sequences of actions that achieve its goals. This process is called &lt;span style="color: #1c8845"&gt;&lt;strong&gt;Search&lt;/strong&gt;&lt;/span&gt;.&amp;nbsp;&lt;/p&gt;&lt;h6&gt;Watch this video to understand more on how search problems are formulated.&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://mediasite.centennialcollege.ca/Mediasite/Play/d3552731105248edaddf487cf955b47f1d" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/d3552731105248edaddf487cf955b47f1d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/d3552731105248edaddf487cf955b47f1d&amp;quot;}"&gt;https://mediasite.centennialcollege.ca/Mediasite/Play/d3552731105248edaddf487cf955b47f1d&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;h5&gt;Formulating the search problem&lt;/h5&gt;&lt;p&gt;As seen from the video, A search problem consists of:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A state space (Part of the task environment)&lt;/li&gt;&lt;li&gt;A successor function (with actions, costs): How do we explore from the current state?&lt;/li&gt;&lt;li&gt;A start state (initial state): Where do we begin our search?&lt;/li&gt;&lt;li&gt;A goal test: How will we know when we've found the solution?&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A &lt;span style="color: #000000"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/span&gt; is a&lt;span style="color: #000000"&gt;&lt;strong&gt; sequence of actions&amp;nbsp;(a plan)&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;span style="font-size: 0.875rem;"&gt;which transforms the start state into a goal state.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692631_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Search problem&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;search_problem.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;search_problem.png&lt;/a&gt;&lt;/p&gt;&lt;h6&gt;Search problem examples:&lt;/h6&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #046ef6"&gt;&lt;strong&gt;Example 1: Pac-Man&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;Think of Pac-Man as a search agent, as per the below figure:&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692632_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;PACman as a search agent&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;Pacman.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;Pacman.png&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;The state space are all the possible positions the agent can be located at in the game as per the below figure:&lt;/p&gt;&lt;p style="text-align: left;"&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692633_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;State space for PACman&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;Pacman_states.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;Pacman_states.png&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;Depending on the nature of the problem to be solved the state space, successor function, initial state and final states vary. Listed below are two different problems that require different scenarios.&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;strong&gt;Problem number one:&lt;/strong&gt;&lt;/p&gt;&lt;p style="text-align: left;"&gt;The &lt;span style="color: #000000"&gt;&lt;strong&gt;agent&lt;/strong&gt;&lt;/span&gt; is required to find a &lt;span style="color: #000000"&gt;&lt;strong&gt;path&lt;/strong&gt;&lt;/span&gt;, in this case the problem can be defined as follows:&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;State space&lt;/strong&gt;&lt;/span&gt;: (x,y) location&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/span&gt;: North South East West&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Successor&lt;/strong&gt;&lt;/span&gt;: update location only&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Goal test&lt;/strong&gt;&lt;/span&gt;: is (x,y)=END&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;strong&gt;Problem number two:&lt;/strong&gt;&lt;/p&gt;&lt;p style="text-align: left;"&gt;The &lt;span style="color: #000000"&gt;&lt;strong&gt;agent&lt;/strong&gt;&lt;/span&gt; is required to &lt;span style="color: #000000"&gt;&lt;strong&gt;eat all the food&lt;/strong&gt;&lt;/span&gt;, in this case the problem can be defined as follows:&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;State space&lt;/strong&gt;&lt;/span&gt;: {(x,y), dot booleans}&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/span&gt;: North South East West&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Successor&lt;/strong&gt;&lt;/span&gt;: update location and possibly a dot boolean&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Goal test&lt;/strong&gt;&lt;/span&gt;: dots all false&lt;/p&gt;&lt;h5 style="text-align: left;"&gt;&lt;span style="color: #046ef6"&gt;&lt;strong&gt;Example 2: File search agent&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;In the below figure, think&amp;nbsp;of an agent search for a file, assume the agent needs to find f211.txt on your computer:&lt;/p&gt;&lt;p style="text-align: left;"&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692634_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Agent to search for a file&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;file_Search_example.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;file_Search_example.png&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;Problem :&lt;span style="color: #000000"&gt;&lt;strong&gt; The agent&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt; &lt;/strong&gt;is required to search for a file&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;State space&lt;/strong&gt;&lt;/span&gt;: {All file names}&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/span&gt;: Investigate current file and file children or return back to parent file&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Successor&lt;/strong&gt;&lt;/span&gt;: update files investigated&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Goal test&lt;/strong&gt;&lt;/span&gt;: is (file name)= f211.txt&lt;/p&gt;&lt;h5&gt;&lt;span style="color: #046ef6"&gt;&lt;strong&gt;Example number 3: The agent is required to find the shortest path (route)&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;Problem : The agent is required to find the shortest path between two cities (Arad and Bucharest) on a map of Romania&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692635_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Route search agent -Romania map&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;Romania_map.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;Romania_map.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;State space :&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;All cities&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Actions :&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Investigate all routes between cities&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Successor&amp;nbsp;:&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt; &lt;/strong&gt;update city routes investigated&lt;/p&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Goal test:&lt;/strong&gt;&lt;/span&gt; is (city )= Bucharest&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #046ef6"&gt;&lt;span style="font-size: 1.5rem;"&gt;Key point: Considerable amount of time is spent here to abstract the search problem.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;Representing the state space&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;State space graph:&lt;/strong&gt; A mathematical representation of a search problem.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Nodes, also known as vertices are (abstracted) world configurations.&lt;/li&gt;&lt;li&gt;Arcs represent successors (action results).&lt;/li&gt;&lt;li&gt;The goal test is a set of goal nodes (maybe only one).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a search graph, each state occurs only once!&lt;/p&gt;&lt;p&gt;We can rarely build this full graph in memory (it’s too big), but it’s a useful idea.&lt;/p&gt;&lt;p&gt;The below figure illustrates a tiny graph space:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692636_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Graph example&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;Graph_exapmle.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:488,&amp;quot;height&amp;quot;:429.43999999999994}"&gt;Graph_exapmle.png&lt;/a&gt;&lt;/p&gt;&lt;h5&gt;State Space Graphs vs. Search Trees&lt;/h5&gt;&lt;br&gt;&lt;p&gt;A tree is a special case of the graph. We construct both on demand – and we construct as little as possible.&amp;nbsp;Each &lt;strong&gt;Node&lt;/strong&gt; in the search tree is an entire &lt;strong&gt;Path&lt;/strong&gt; in the state space graph.&lt;/p&gt;&lt;p&gt;The figure below illustrates the same path(route) represented in a graph and in a tree.&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692637_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Graph versus Tree&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;Graph_versus_tree.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:877.4000244140625,&amp;quot;height&amp;quot;:385.2132378005685}"&gt;Graph_versus_tree.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Notice from the above figure that on a graph the node is only represented once, while on a tree the node might repeat, for example look at node &lt;strong&gt;a&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Traversing a Tree:&lt;/strong&gt; It is important to distinguish between the &lt;span style="color: #000000"&gt;&lt;strong&gt;state space&lt;/strong&gt;&lt;/span&gt; and the &lt;span style="color: #000000"&gt;&lt;strong&gt;search tree&lt;/strong&gt;&lt;/span&gt;.&amp;nbsp;&lt;/p&gt;&lt;h6&gt;State space&lt;/h6&gt;&lt;p&gt;Describes the (possible) infinite set of states in the world and the actions that allow transitions from one stet to the other.&lt;/p&gt;&lt;h6&gt;Search trees&lt;/h6&gt;&lt;p&gt;Describe the paths between these states reaching towards the goal.&lt;/p&gt;&lt;p&gt;In a search tree there may be multiple paths to any given node, but each node in the tree has a unique path back to the root.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;References&lt;/h5&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Artificial intelligence a modern approach&lt;/strong&gt; by Stuart Russell, Peter Norvig - Chapter 3&lt;/li&gt;&lt;li&gt;UC Berkeley CS188 Intro to AI&amp;nbsp;&lt;a href="http://ai.berkeley.edu/home.html"&gt;http://ai.berkeley.edu/home.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</TEXT><TYPE
   value="H"/></BODY><DATES><CREATED value="2024-10-04 18:31:42 EDT"/><UPDATED value="2024-11-11 19:31:13 EST"/><START
   value=""/><END value=""/></DATES><FLAGS><ISAVAILABLE value="true"/><ISFROMCARTRIDGE value="false"/><ISFOLDER
   value="false"/><ISDESCRIBED value="false"/><ISTRACKED value="true"/><ISLESSON value="false"/><ISSEQUENTIAL
   value="false"/><ALLOWGUESTS value="true"/><ALLOWOBSERVERS value="true"/><LAUNCHINNEWWINDOW
   value="false"/><ISREVIEWABLE value="false"/><ISGROUPCONTENT value="false"/><ISSAMPLECONTENT
   value="false"/><PARTIALLYVISIBLE value="false"/><HASTHUMBNAIL value="false"/></FLAGS><CONTENTHANDLER
  value="resource/x-bb-document"/><RENDERTYPE value="REGULAR"/><FOLDERTYPE value=""/><URL value=""/><VIEWMODE
  value="TEXT_ICON_ONLY"/><OFFLINENAME value=""/><OFFLINEPATH value=""/><LINKREF value=""/><PARENTID
  value="_800496_1"/><REVIEWABLEREASON value="NONE"/><VERSION value="3"/><THUMBNAILALT value=""/><AISTATE
  value="No"/><AIACCEPTINGUSER value=""/><EXTENDEDDATA/><FILES/></CONTENT>
