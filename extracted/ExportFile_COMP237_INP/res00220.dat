<?xml version="1.0" encoding="UTF-8"?>
<CONTENT id="_800673_1"><TITLE value="Topic 3.3: Depth first search (DFS)"/><TITLECOLOR value="#000000"/><DESCRIPTION
   value=""/><BODY><TEXT>&lt;div data-layout-row="a3bd9ac6-a6cf-4b66-b518-3f7b7d1663fc"&gt;&lt;div data-layout-column="47f3672c-e1a6-40ad-9452-266cd9ce03d9" data-layout-column-width="12"&gt;&lt;div data-bbid="bbml-editor-id_a0b5fe67-9fbe-45b5-bbd5-71a5dfdfe5a4"&gt;&lt;h4&gt;Topic 3.3: Depth first search (DFS)&lt;/h4&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #1c8845"&gt;Depth first search strategy&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;In Depth first Search (DFS), the strategy is to expand the&lt;span style="color: #000000"&gt; &lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;deepest&lt;/strong&gt;&lt;/span&gt; node first.&lt;/p&gt;&lt;h6&gt;Watch this video to learn more about the strategy of the (DFS) algorithm.&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://mediasite.centennialcollege.ca/Mediasite/Play/398c489eb7e846df8bbb643c8bf4a3821d" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/398c489eb7e846df8bbb643c8bf4a3821d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/398c489eb7e846df8bbb643c8bf4a3821d&amp;quot;}"&gt;https://mediasite.centennialcollege.ca/Mediasite/Play/398c489eb7e846df8bbb643c8bf4a3821d&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;As noted from the video, the rational agent adopts the strategy of expanding the deepest node on the &lt;span style="color: #000000"&gt;&lt;strong&gt;frontier.&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;The below figure provides an illustration of which nodes get expanded first in a simple graph search, when trying to reach from node&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;S(start)&lt;/strong&gt;&lt;/span&gt; to the node &lt;span style="color: #000000"&gt;&lt;strong&gt;G (goal)&lt;/strong&gt;&lt;/span&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692643_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;DFS for a simple graph search&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_DFS_exp.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_DFS_exp.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Notice from the above figure:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The Rational agent chooses the leftmost node &lt;strong&gt;&lt;em&gt;d&lt;/em&gt;&lt;/strong&gt; to start the search, this is only a rule and is not etched in stone, you can set a different rule but what is important is to follow the same rule as you go through the search.&lt;/li&gt;&lt;li&gt;The Rational agent has no estimate on how close he is to the &lt;span style="color: #000000"&gt;&lt;strong&gt;goal state G&lt;/strong&gt;&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;The Rational agent is logging all the paths on the fringe, this is what would be recorded during the loop and the agent will exit the loop only when he finds the goal.&lt;/li&gt;&lt;/ol&gt;&lt;h5&gt;Depth first Search data structure&lt;/h5&gt;&lt;p&gt;The implementation of this algorithm is&amp;nbsp;Last In, First Out (LIFO), &lt;span style="color: #000000"&gt;this means whatever path is identified, it is added to the &lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;fringe&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;before back tracking in a stacked manner. From the example explained in the previous section, the&lt;span style="color: #000000"&gt;&lt;strong&gt; fringe&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;would look something like this:&lt;/p&gt;&lt;p&gt;S → e → r → f  →G&lt;/p&gt;&lt;p&gt;S → e → r → f → c → a&lt;/p&gt;&lt;p&gt;S → e →h → q&lt;/p&gt;&lt;p&gt;S → e → h → p → q&lt;/p&gt;&lt;p&gt;S → d → c → a&lt;/p&gt;&lt;p&gt;S → d → b → a&lt;/p&gt;&lt;p&gt;The figure below illustrates further:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692644_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;DFS fringe stack building&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_DFS_Fringe.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_DFS_Fringe.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;So, the stack structure&amp;nbsp;is a pile of objects placed on top of another (for example, a stack of books, a stack of clothes, or a stack of papers, etc.)&lt;/p&gt;&lt;p&gt;In the case of our agent, he is stacking all the possible paths that he has investigated and only when a path shows the goal node, the agent will then declare success and adopt the last path on the stack for actual action. &lt;img src="https://s.brightspace.com/lib/emoticons/1.0.0/blush-light.svg" alt="blush with light skin tone emoticon"&gt;&lt;/p&gt;&lt;p&gt;There are two stacking operations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;one for adding items to a stack&lt;/li&gt;&lt;li&gt;one for removing items from a stack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The operation used for adding items to a stack is called&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;push&lt;/strong&gt;&lt;/span&gt;, while the operation used for removing items is called as&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Items are popped in the reverse order to push; that is why this data structure is called&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;Last In, First Out&amp;nbsp;(LIFO)&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;&lt;h6&gt;To learn more about stacks check out the following video:&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://www.youtube.com/embed/r7P9sy5Rar8?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://www.youtube.com/embed/r7P9sy5Rar8?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://www.youtube.com/embed/r7P9sy5Rar8?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;}"&gt;https://www.youtube.com/embed/r7P9sy5Rar8?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;Depth first Search Performance evaluation&amp;nbsp;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;As per the below figure, the DFS algorithm expands deep into the tree search:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692645_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Depth First Strategy  performance&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_DFS_Performance.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:840,&amp;quot;height&amp;quot;:414.80412371134025}"&gt;M3_DFS_Performance.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Based on the above figure, and assuming the depth of the tree is &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;tiers, at each level the branching accumulates to b&lt;sup&gt;x&lt;/sup&gt; where &lt;em&gt;x&lt;/em&gt; is the tier, referring back to the search algorithms performance criteria explained in &lt;a href="/bbcswebdav/courses/COMP237_INP.DEV.ZIP/web_resources/d2l/common/dialogs/quickLink/quickLink.d2l?ou=672556&amp;amp;type=content&amp;amp;rcode=CENCOL-2572303"&gt;Topic 3.2&lt;/a&gt;.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The four would be as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Completeness:&lt;/strong&gt;&lt;/span&gt; it is complete, only if we prevent cycles.&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Optimal:&lt;/strong&gt;&lt;/span&gt; No&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Time complexity:&lt;/strong&gt;&lt;/span&gt; If &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt; is finite, takes time &lt;span style="color: #000000"&gt;&lt;strong&gt;O(b&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;m&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Space complexity:&lt;/strong&gt;&lt;/span&gt; It only expands if it has children on path to root, so &lt;span style="color: #000000"&gt;&lt;strong&gt;O(bm)&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h6&gt;Note the average branching factor b is calculated as follows:&lt;/h6&gt;&lt;br&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;The average branching factor (b) =&amp;nbsp;the number of non-root nodes / the number of non-leaf nodes.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;References&lt;/h5&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Artificial intelligence a modern approach&lt;/strong&gt; by Stuart J. Russell and Peter Norvig , chapter 3&lt;/li&gt;&lt;li&gt;Hands- On Artificial Intelligence for Search by Devangini Patel Chapter 1&amp;nbsp;&lt;/li&gt;&lt;li&gt;UC Berkeley CS188 Intro to AI &lt;a href="http://ai.berkeley.edu/home.html"&gt;http://ai.berkeley.edu/home.html&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r7P9sy5Rar8"&gt;https://www.youtube.com/watch?v=r7P9sy5Rar8&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</TEXT><TYPE
   value="H"/></BODY><DATES><CREATED value="2024-10-04 18:31:43 EDT"/><UPDATED value="2024-12-20 15:33:41 EST"/><START
   value=""/><END value=""/></DATES><FLAGS><ISAVAILABLE value="true"/><ISFROMCARTRIDGE value="false"/><ISFOLDER
   value="false"/><ISDESCRIBED value="false"/><ISTRACKED value="true"/><ISLESSON value="false"/><ISSEQUENTIAL
   value="false"/><ALLOWGUESTS value="true"/><ALLOWOBSERVERS value="true"/><LAUNCHINNEWWINDOW
   value="false"/><ISREVIEWABLE value="false"/><ISGROUPCONTENT value="false"/><ISSAMPLECONTENT
   value="false"/><PARTIALLYVISIBLE value="false"/><HASTHUMBNAIL value="false"/></FLAGS><CONTENTHANDLER
  value="resource/x-bb-document"/><RENDERTYPE value="REGULAR"/><FOLDERTYPE value=""/><URL value=""/><VIEWMODE
  value="TEXT_ICON_ONLY"/><OFFLINENAME value=""/><OFFLINEPATH value=""/><LINKREF value=""/><PARENTID
  value="_800498_1"/><REVIEWABLEREASON value="NONE"/><VERSION value="3"/><THUMBNAILALT value=""/><AISTATE
  value="No"/><AIACCEPTINGUSER value=""/><EXTENDEDDATA/><FILES/></CONTENT>
