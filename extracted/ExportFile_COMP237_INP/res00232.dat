<?xml version="1.0" encoding="UTF-8"?>
<CONTENT id="_800686_1"><TITLE value="Topic 10.4: Language pre-processing"/><TITLECOLOR value="#000000"/><DESCRIPTION
   value=""/><BODY><TEXT>&lt;div data-layout-row="5e06d529-dc14-4802-b81f-0bc8392e817e"&gt;&lt;div data-layout-column="568981e4-4a7c-404e-b93e-6517c8916278" data-layout-column-width="12"&gt;&lt;div data-bbid="bbml-editor-id_a5b476b3-c5e0-4cbf-8b17-ffa860f7ea5b"&gt;&lt;h4&gt;Topic 10.4: Language pre-processing&lt;/h4&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #1c8845"&gt;Language pre-processing&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;As in any machine learning and AI project data pre-processing and data modelling are crucial to allow for building efficient predictive modelling and this take 70-80% of the time. Natural Language Processing projects require the same and there some specific techniques for NLP, that have been developed over the years such as tokenization&lt;span style="font-size: 0.875rem;"&gt;, stemming, etc. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;Watch this video then continue reading:&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://mediasite.centennialcollege.ca/Mediasite/Play/df2b0a0638f244c4bdd192fb52d5f0371d" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/df2b0a0638f244c4bdd192fb52d5f0371d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/df2b0a0638f244c4bdd192fb52d5f0371d&amp;quot;}"&gt;https://mediasite.centennialcollege.ca/Mediasite/Play/df2b0a0638f244c4bdd192fb52d5f0371d&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Check the below for some common pre-processing practices:&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;&lt;/span&gt; is the process of dividing a text into a sequence of words or words.&lt;/p&gt;&lt;p&gt;Using nltk we can separate text into:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sentences&lt;/li&gt;&lt;li&gt;Words&lt;/li&gt;&lt;li&gt;Words punctuations&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Have a look at the below output of tokenization using nltk. The first output is splitting based on sentences, the second is splitting based on words and the last is splitting based on words taking into account punctuation. Notice &lt;span style="color: #000000"&gt;"It's"&lt;/span&gt; was split into two phrases in the second &lt;span style="color: #000000"&gt;"It"&lt;/span&gt; and &lt;span style="color: #000000"&gt;"'s"&lt;/span&gt; and was split into three tokens in the third &lt;span style="color: #000000"&gt;"It"&lt;/span&gt;,&lt;span style="color: #000000"&gt; " ' "&lt;/span&gt;, &lt;span style="color: #000000"&gt;"s"&lt;/span&gt; :&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1693193_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Tokenization&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M10_nltk_tok.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M10_nltk_tok.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;Stemming&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;:&lt;/span&gt; is a way of producing morphological variants of a root/base word.&lt;/p&gt;&lt;p&gt;Working with text means working with a lot of variation. We must deal with different forms of the same word and enable the computer to understand that these different words have the same base form. For example, the word sing can appear in many forms, such as singer, singing, song, sung, and so on. This set of words share similar meanings.&lt;/p&gt;&lt;p&gt;Using nltk we can apply different stemmer algorithms text, the most famous stemmers are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Porter&lt;/li&gt;&lt;li&gt;Lancaster&lt;/li&gt;&lt;li&gt;snowball&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Have a look at the below output of stemming for a group of words using nltk:&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1693194_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Stemming&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M10_nltk_stem.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M10_nltk_stem.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;Lemmatization:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;is the process of grouping together the different inflected forms of a word so they can be analyzed as a single item.&lt;/p&gt;&lt;p&gt;Lemmatization is like stemming, but it brings &lt;span style="color: #000000"&gt;context to the words&lt;/span&gt;. So, it&lt;span style="color: #000000"&gt; links words with similar meanings to one word.&lt;/span&gt; For example, all three stemmers said that the base form of&amp;nbsp;calves&amp;nbsp;is&amp;nbsp;calv, which is not a real word. Lemmatization takes a more structured approach to solve this problem.&lt;/p&gt;&lt;p&gt;Have a look at the below output of :lemmatization for the same group of words using nltk:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1693195_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Lemmatization&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M10_nltk_lema.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M10_nltk_lema.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We can see that the noun lemmatizer works differently than the verb lemmatizer when it comes to words such as &lt;span style="color: #000000"&gt;writing&lt;/span&gt; or &lt;span style="color: #000000"&gt;calves&lt;/span&gt;.If you compare these outputs to stemmer outputs, you&amp;nbsp;will see that there are differences too. The lemmatizer outputs are all meaningful, whereas stemmer outputs may or may not be&amp;nbsp;meaningful.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;chunking: &lt;/strong&gt;&lt;/span&gt;is the process of dividing text into pieces for further analysis.&lt;/p&gt;&lt;p&gt;The&amp;nbsp;conditions that are used to divide the text into chunks can vary based on the problem at hand. This is not the same as tokenization, where text is also divided into pieces. During chunking, we do not adhere to any constraints, except for the fact that the output chunks need to be meaningful.&lt;/p&gt;&lt;p&gt;Have a look at the below output of chunking using nltk&amp;nbsp;for chunking 12,000 words from the brown corpus where the criteria was set to have 700 words in each chunk. for the same group of words :&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1693196_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Chunking&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M10_nltk_chunk.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M10_nltk_chunk.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;Stop Words: &lt;/strong&gt;&lt;/span&gt;are commonly used words (such as “the”, “a”, “an”, “in”) that a search engine has been programmed to ignore, both when indexing entries for searching and when retrieving them as the result of a search query.&lt;/p&gt;&lt;p&gt;One of the major forms of pre-processing is to filter out &lt;span style="color: #000000"&gt;useless&lt;/span&gt; data. In natural language processing, useless words (data), are referred to as stop words.&lt;/p&gt;&lt;p&gt;Have a look at the below output which lists the English stop words using tools built in nltk:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1693197_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;English stopwords&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M10_nltk_stopwords.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M10_nltk_stopwords.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;strong&gt;Lower casing&lt;/strong&gt;&lt;/span&gt; the text helps save many variations of the same word. We can use python string method &lt;span style="color: #000000"&gt;&lt;strong&gt;lower&lt;/strong&gt;&lt;/span&gt; to do so, have a look at the below example:&lt;/p&gt;&lt;pre&gt;message = 'PYTHON IS FUN'&lt;/pre&gt;&lt;pre&gt;# convert message to lowercase&lt;/pre&gt;&lt;pre&gt;print(message.lower())&lt;/pre&gt;&lt;pre&gt;# Output: python is fun&lt;/pre&gt;&lt;br&gt;&lt;h5&gt;References&lt;/h5&gt;&lt;p&gt;1- Chapter 23 Artificial intelligence a modern approach by Stuart J. Russell and Peter Norvig.&lt;/p&gt;&lt;p&gt;2- Chapter 15 &lt;a href="https://learning.oreilly.com/library/view/artificial-intelligence-with/9781786464392/"&gt;Artificial Intelligence with Python&lt;/a&gt;&amp;nbsp;second edition by Prateek Joshi&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</TEXT><TYPE
   value="H"/></BODY><DATES><CREATED value="2024-10-04 18:31:47 EDT"/><UPDATED value="2024-11-14 16:17:26 EST"/><START
   value=""/><END value=""/></DATES><FLAGS><ISAVAILABLE value="true"/><ISFROMCARTRIDGE value="false"/><ISFOLDER
   value="false"/><ISDESCRIBED value="false"/><ISTRACKED value="true"/><ISLESSON value="false"/><ISSEQUENTIAL
   value="false"/><ALLOWGUESTS value="true"/><ALLOWOBSERVERS value="true"/><LAUNCHINNEWWINDOW
   value="false"/><ISREVIEWABLE value="false"/><ISGROUPCONTENT value="false"/><ISSAMPLECONTENT
   value="false"/><PARTIALLYVISIBLE value="false"/><HASTHUMBNAIL value="false"/></FLAGS><CONTENTHANDLER
  value="resource/x-bb-document"/><RENDERTYPE value="REGULAR"/><FOLDERTYPE value=""/><URL value=""/><VIEWMODE
  value="TEXT_ICON_ONLY"/><OFFLINENAME value=""/><OFFLINEPATH value=""/><LINKREF value=""/><PARENTID
  value="_800539_1"/><REVIEWABLEREASON value="NONE"/><VERSION value="3"/><THUMBNAILALT value=""/><AISTATE
  value="No"/><AIACCEPTINGUSER value=""/><EXTENDEDDATA/><FILES/></CONTENT>
