<?xml version="1.0" encoding="UTF-8"?>
<CONTENT id="_800687_1"><TITLE value="Topic 3.4 : Breadth-first search (BDS)"/><TITLECOLOR value="#000000"/><DESCRIPTION
   value=""/><BODY><TEXT>&lt;div data-layout-row="295131eb-ae71-471e-b1ea-c45fe8cb8d7a"&gt;&lt;div data-layout-column="3de0bbe0-9186-401b-9ddd-706b5be1c78c" data-layout-column-width="12"&gt;&lt;div data-bbid="bbml-editor-id_d9e77ca1-6382-437d-a195-aa41a6c840b2"&gt;&lt;h4&gt;Topic 3.4: Breadth first search (BFS)&lt;/h4&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #1c8845"&gt;Breadth first search strategy&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;In Breadth-First Search (BFS), the strategy is to expand the&lt;span style="color: #000000"&gt;&amp;nbsp;Shallowest&lt;/span&gt;&amp;nbsp;node first.&lt;/p&gt;&lt;h6&gt;Watch this video to learn more about the strategy of the BFS algorithm&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://mediasite.centennialcollege.ca/Mediasite/Play/2bbe1d74be614f88af0a512d2236f4651d" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/2bbe1d74be614f88af0a512d2236f4651d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/2bbe1d74be614f88af0a512d2236f4651d&amp;quot;}"&gt;https://mediasite.centennialcollege.ca/Mediasite/Play/2bbe1d74be614f88af0a512d2236f4651d&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;The Breadth-First search is used in a wide range of applications as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Web crawling for indexing pages&lt;/li&gt;&lt;li&gt;Broadcasting messaging&lt;/li&gt;&lt;li&gt;Finding the shortest path&lt;/li&gt;&lt;li&gt;GPS navigation&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;As noted in the video, the rational agent adopts the strategy of expanding the &lt;span style="color: #000000"&gt;&lt;strong&gt;shallowest&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;node on the &lt;span style="color: #000000"&gt;&lt;strong&gt;frontier.&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;The below figure provides an illustration of which nodes get expanded first in a simple graph search when trying to reach from node&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;S(start)&lt;/strong&gt;&lt;/span&gt; to no node &lt;span style="color: #000000"&gt;&lt;strong&gt;G (goal)&lt;/strong&gt;&lt;/span&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692646_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Breadth first search algorithm&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_BDS_layer_teirs.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_BDS_layer_teirs.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;From the figure above, we notice the following:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The Rational agent chooses the leftmost node &lt;strong&gt;&lt;em&gt;d&lt;/em&gt;&lt;/strong&gt; to start the search, this is only a rule and is not etched in stone, you can set a different rule but what is important is to follow the same rule as you go through the the search.&lt;/li&gt;&lt;li&gt;The Rational agent has no estimate on how close he is to the &lt;span style="color: #000000"&gt;&lt;strong&gt;goal state G&lt;/strong&gt;&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;The Rational agent is logging all the paths on the fringe, this is what would be recorded during the loop and the agent will exit the loop only when he finds the goal.&lt;/li&gt;&lt;li&gt;If &lt;strong&gt;&lt;em&gt;d&lt;/em&gt;&lt;/strong&gt; is not equal to the goal state G then the agent will look for the next available node at the same level which would be e.&lt;/li&gt;&lt;/ol&gt;&lt;h5&gt;Breadth-First Search data structure&lt;/h5&gt;&lt;p&gt;The implementation of this algorithm is a First in, first out (FIFO)&lt;span style="color: #000000"&gt;, this means the root node gets expanded first, then all its successors get expanded next, then their successors, and so on.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt;This is a systematic&amp;nbsp;search strategy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;If the case was a graph search, then you can select any node (vertex) representing a state and expand all the adjacent nodes, then their adjacent nodes and so on. The best data structure for implementing this is a &lt;span style="color: #000000"&gt;&lt;strong&gt;queue&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Have a look at the figure below, which illustrates one possible implementation of the the queue.&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692647_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;BFS queue&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_BFS__fringe.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_BFS__fringe.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thus, new nodes (which are always deeper than their parents) go to the back of the queue, and old nodes, which are shallower than the new nodes,&lt;/p&gt;&lt;p&gt;get expanded first. So, think of the queue as a tube where we can push things into and then pop (remove) them. This also means we can do &lt;span style="color: #000000"&gt;&lt;strong&gt;an early goal test&lt;/strong&gt;&lt;/span&gt;, for example, in the above figure once &lt;strong&gt;&lt;em&gt;G&lt;/em&gt;&lt;/strong&gt; is added we check if it a solution.&lt;/p&gt;&lt;p&gt;There are two operations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;one for adding items to a queue.&lt;/li&gt;&lt;li&gt;one for removing items from a queue.&lt;/li&gt;&lt;/ul&gt;&lt;h6&gt;There are many other operations related to queues, to learn more about queues check out the following videos:&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://www.youtube.com/embed/sDO9bPaBg6A?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://www.youtube.com/embed/sDO9bPaBg6A?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://www.youtube.com/embed/sDO9bPaBg6A?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;}"&gt;https://www.youtube.com/embed/sDO9bPaBg6A?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;To review another simple &lt;strong&gt;BFS&lt;/strong&gt; example watch this video:&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://www.youtube.com/embed/PbCl67GY1ck?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://www.youtube.com/embed/PbCl67GY1ck?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://www.youtube.com/embed/PbCl67GY1ck?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;}"&gt;https://www.youtube.com/embed/PbCl67GY1ck?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;In Summary, we can think of BFS implementation as illustrated in the following figure:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692648_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;BFS implementation steps&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_BFS_implementation_steps.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_BFS_implementation_steps.png&lt;/a&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;Breadth first Search Performance evaluation&amp;nbsp;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;As per the below figure, the BFS algorithm expands deep into the tree search:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692649_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;BFS performance&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_BFS_performance.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:717,&amp;quot;height&amp;quot;:346.43741588156126}"&gt;M3_BFS_performance.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Based on the above figure, and assuming the depth of the tree is m tiers, at each level the branching accumulates to b&lt;sup&gt;x&lt;/sup&gt; where &lt;strong&gt;&lt;em&gt;x&lt;/em&gt;&lt;/strong&gt; is the tier (You can refer back to the search algorithms performance criteria explained in &lt;a href="/bbcswebdav/courses/COMP237_INP.DEV.ZIP/web_resources/d2l/common/dialogs/quickLink/quickLink.d2l?ou=672556&amp;amp;type=content&amp;amp;rcode=CENCOL-2572303"&gt;Topic 3.2&lt;/a&gt;.)&amp;nbsp;&lt;/p&gt;&lt;p&gt;The four performance measures would be as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Completeness:&lt;/strong&gt;&lt;/span&gt; it is complete only if &lt;strong&gt;&lt;em&gt;b&lt;/em&gt;&lt;/strong&gt; is a finite number.&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Optimal:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;It is optimal if all action costs are identical&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Time complexity:&lt;/strong&gt;&lt;/span&gt; If &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;is finite, the time it takes to execute the search is&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;O(b&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;m&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Space complexity:&lt;/strong&gt;&lt;/span&gt; It only expands if it has children on path to root, so &lt;span style="color: #000000"&gt;&lt;strong&gt;O(b&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;m&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692651_1" data-bbtype="attachment" data-bbfile="{&amp;quot;linkName&amp;quot;:&amp;quot;Avatar6.1.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:290,&amp;quot;height&amp;quot;:290}"&gt;Avatar6.1.png&lt;/a&gt;&lt;strong&gt;Note the average branching factor b is calculated as follows:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The average branching factor&amp;nbsp;(b) =&amp;nbsp;the number of non-root nodes /the number of non-leaf nodes.&lt;/p&gt;&lt;p&gt;In &lt;span style="color: #000000"&gt;&lt;strong&gt;BFS&lt;/strong&gt;&lt;/span&gt;, all the nodes are stored in the memory, which makes it very &lt;span style="color: #000000"&gt;&lt;strong&gt;scary&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;. &lt;/span&gt;Nevertheless, it is fast and guaranteed to provide a solution, therefore it is used widely in many applications as mentioned earlier.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;References&lt;/h5&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Artificial intelligence a modern approach&lt;/strong&gt; by Stuart J. Russell and Peter Norvig. Chapter 3&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Hands-On Artificial Intelligence for Search&lt;/strong&gt; by Devangini Patel. Chapter 2&amp;nbsp;&lt;/li&gt;&lt;li&gt;UC Berkeley CS188 Intro to AI&amp;nbsp;&lt;a href="http://ai.berkeley.edu/home.html"&gt;http://ai.berkeley.edu/home.html&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PbCl67GY1ck"&gt;https://www.youtube.com/watch?v=PbCl67GY1ck&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://youtu.be/sDO9bPaBg6A"&gt;https://youtu.be/sDO9bPaBg6A&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</TEXT><TYPE
   value="H"/></BODY><DATES><CREATED value="2024-10-04 18:31:43 EDT"/><UPDATED value="2024-11-11 19:35:13 EST"/><START
   value=""/><END value=""/></DATES><FLAGS><ISAVAILABLE value="true"/><ISFROMCARTRIDGE value="false"/><ISFOLDER
   value="false"/><ISDESCRIBED value="false"/><ISTRACKED value="true"/><ISLESSON value="false"/><ISSEQUENTIAL
   value="false"/><ALLOWGUESTS value="true"/><ALLOWOBSERVERS value="true"/><LAUNCHINNEWWINDOW
   value="false"/><ISREVIEWABLE value="false"/><ISGROUPCONTENT value="false"/><ISSAMPLECONTENT
   value="false"/><PARTIALLYVISIBLE value="false"/><HASTHUMBNAIL value="false"/></FLAGS><CONTENTHANDLER
  value="resource/x-bb-document"/><RENDERTYPE value="REGULAR"/><FOLDERTYPE value=""/><URL value=""/><VIEWMODE
  value="TEXT_ICON_ONLY"/><OFFLINENAME value=""/><OFFLINEPATH value=""/><LINKREF value=""/><PARENTID
  value="_800499_1"/><REVIEWABLEREASON value="NONE"/><VERSION value="3"/><THUMBNAILALT value=""/><AISTATE
  value="No"/><AIACCEPTINGUSER value=""/><EXTENDEDDATA/><FILES/></CONTENT>
