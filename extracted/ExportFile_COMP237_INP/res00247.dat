<?xml version="1.0" encoding="UTF-8"?>
<CONTENT id="_800702_1"><TITLE value="Topic 3.5: Uniform cost search (UCS)"/><TITLECOLOR value="#000000"/><DESCRIPTION
   value=""/><BODY><TEXT>&lt;div data-layout-row="1b7723a9-8caf-4cea-ab11-9e01d658134f"&gt;&lt;div data-layout-column="92852798-d2ea-45f3-954d-1dc140272a92" data-layout-column-width="12"&gt;&lt;div data-bbid="bbml-editor-id_23570eaa-23e3-483f-9b0e-5bd1fbb36b31"&gt;&lt;h4&gt;Topic 3.5: Uniform Cost Search (UCS)&lt;/h4&gt;&lt;br&gt;&lt;h5&gt;&lt;span style="color: #1c8845"&gt;Uniform cost search strategy&lt;/span&gt;&lt;/h5&gt;&lt;br&gt;&lt;p&gt;In Uniform Cost Search (UCS), the strategy is to expand the&lt;span style="color: #1c8845"&gt;&lt;strong&gt;&amp;nbsp;Cheapest&amp;nbsp;node&lt;/strong&gt;&lt;/span&gt; first.&lt;/p&gt;&lt;h6&gt;Watch this video to learn more about the strategy of the UCS algorithm:&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://mediasite.centennialcollege.ca/Mediasite/Play/013bf9620b394aed92f2d08e005a55e41d" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/013bf9620b394aed92f2d08e005a55e41d&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://mediasite.centennialcollege.ca/Mediasite/Play/013bf9620b394aed92f2d08e005a55e41d&amp;quot;}"&gt;https://mediasite.centennialcollege.ca/Mediasite/Play/013bf9620b394aed92f2d08e005a55e41d&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;span style="font-size: 0.875rem;"&gt;When actions have different costs, an obvious choice is to use best first search where the evaluation function is the &lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;cost of the path &lt;/strong&gt;&lt;/span&gt;&lt;span style="font-size: 0.875rem;"&gt;from the root to the current node.&lt;/span&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.5rem;"&gt;&lt;strong&gt;Root&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 3rem;"&gt;&lt;strong&gt;â†’&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 2.25rem;"&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.5rem;"&gt;&lt;strong&gt;&amp;nbsp;Current node&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;This is called the &lt;span style="color: #000000"&gt;&lt;strong&gt;Dijkstra algorithm&lt;/strong&gt;&lt;/span&gt;, known in AI as the &lt;span style="color: #000000"&gt;&lt;strong&gt;Uniform Cost Search&lt;/strong&gt;&lt;/span&gt;. The idea is while &lt;strong&gt;BFS&lt;/strong&gt; spreads out in waves of uniform depth, &lt;strong&gt;UCS&lt;/strong&gt; spreads out in waves of uniform path-cost.&lt;/p&gt;&lt;p&gt;So, indirectly, if the cost of all paths is equal then there is no difference between the two algorithms. &lt;img src="https://s.brightspace.com/lib/emoticons/1.0.0/blush-light.svg" alt="blush with light skin tone emoticon"&gt;&lt;/p&gt;&lt;p&gt;The below figure shows the same graph we used as an example in the previous two topics, &lt;strong&gt;DFS&lt;/strong&gt;&amp;nbsp;and&amp;nbsp;&lt;strong&gt;BFS&lt;/strong&gt;, but here the only difference is that the paths (edges) have a value. Notice when we illustrate the graph into a tree, the flow the agent will adopt is a &lt;span style="color: #000000"&gt;&lt;strong&gt;contour flow&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692652_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Uniform cost strategy&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_UCS.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_UCS.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Not always are the path costs available, but if they are, then this will enhance the &lt;strong&gt;BFS&lt;/strong&gt; algorithm performance.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Remember our search problem related to Romania travel explained in&lt;a href="/bbcswebdav/courses/COMP237_INP.DEV.ZIP/web_resources/d2l/common/dialogs/quickLink/quickLink.d2l?ou=672556&amp;amp;type=content&amp;amp;rcode=CENCOL-2572303"&gt;&amp;nbsp;Topic 3.2.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Consider we know the physical distance between cites as per the below figure:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692653_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Part of the Romania state space&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_UCS_romaina_map_partial.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_UCS_romaina_map_partial.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Notice that the agent using &lt;strong&gt;UCS&lt;/strong&gt; thinks as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The successors of Sibiu are Rimnicu Vilcea and Fagaras, with costs &lt;span style="color: #000000"&gt;&lt;strong&gt;80&lt;/strong&gt;&lt;/span&gt; and &lt;span style="color: #000000"&gt;&lt;strong&gt;99&lt;/strong&gt;&lt;/span&gt;, respectively.&lt;/li&gt;&lt;li&gt;The least-cost node, Rimnicu Vilcea, is expanded next, adding Pitesti with cost&lt;span style="color: #000000"&gt;&lt;strong&gt; 80 + 97=177&lt;/strong&gt;&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;The least-cost node is now Fagaras, so it is expanded, adding Bucharest with cost &lt;span style="color: #000000"&gt;&lt;strong&gt;99+211=310&lt;/strong&gt;&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;Now a goal node has been generated, but &lt;span style="color: #000000"&gt;&lt;strong&gt;uniform-cost search keeps going&lt;/strong&gt;&lt;/span&gt;, choosing Pitesti for expansion and adding a second path to Bucharest with cost &lt;span style="color: #000000"&gt;&lt;strong&gt;80+97+101= 278&lt;/strong&gt;&lt;/span&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, this is another difference between &lt;span style="color: #000000"&gt;&lt;strong&gt;BFS&lt;/strong&gt;&lt;/span&gt; and &lt;span style="color: #000000"&gt;&lt;strong&gt;UCS&lt;/strong&gt;&lt;/span&gt;:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692654_1" data-bbtype="attachment" data-bbfile="{&amp;quot;linkName&amp;quot;:&amp;quot;Avatar4.1.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:289.8000183105469,&amp;quot;height&amp;quot;:289.8000183105469}"&gt;Avatar4.1.png&lt;/a&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;&lt;strong&gt;BFS checks against the goal once node is generated, while UCS checks only after expanding.&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;Accordingly&lt;/span&gt;&lt;/span&gt;, &lt;span style="color: #000000"&gt;&lt;strong&gt; UCS&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt; is &lt;/span&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;guaranteed to find the least cost path&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;.&lt;/span&gt;&lt;img src="https://s.brightspace.com/lib/emoticons/1.0.0/thumbsup-light.svg" alt="thumbs up with light skin tone emoticon"&gt;&lt;/p&gt;&lt;h5&gt;Uniform Cost Search data structure&lt;/h5&gt;&lt;br&gt;&lt;p&gt;The implementation of this algorithm is a&lt;span style="color: #000000"&gt;&amp;nbsp;priority&amp;nbsp;queue, this means the elements in the queue have &lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;priorities&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;, and they are processed in order of those&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt; priorities. &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;This is a systematic&amp;nbsp;search strategy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;If the example mentioned above the priorities were the distances between the cities, we also called it the path cost.&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;UCS&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt; gives the &lt;/strong&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;minimum cumulative cost&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&amp;nbsp;to the &lt;/strong&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;maximum priority&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Let us take the same graph example used in DFS and BFS and add to it path costs as per the figure below:&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692655_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;Graph with path costs&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_UCS_graph.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_UCS_graph.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Based on the above graph, the &lt;span style="color: #000000"&gt;&lt;strong&gt;Priority Queue PQ&lt;/strong&gt;&lt;/span&gt; would look as follows:&lt;/p&gt;&lt;pre&gt;PQ = {(START,0)}&lt;/pre&gt;&lt;pre&gt;PQ = {(p,1) (d,3) (e,9)}&lt;/pre&gt;&lt;pre&gt;PQ = {(d,3) (e,9) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(b,4) (e,5) (c,11) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(b,4) (e,5) (c,11) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(e,5) (a,6) (c,11) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(a,6) (h,6) (c,11) (r,14) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(h,6) (c,11) (r,14) (q,16)}&lt;/pre&gt;&lt;pre&gt;PQ = {(q,10) (c,11) (r,14)}&lt;/pre&gt;&lt;pre&gt;PQ = {(q,10) (c,11) (r,14)}&lt;/pre&gt;&lt;pre&gt;PQ = {(c,11) (r,13)}&lt;/pre&gt;&lt;pre&gt;PQ = {(r,13)}&lt;/pre&gt;&lt;pre&gt;PQ = {(f,18)}&lt;/pre&gt;&lt;pre&gt;PQ = {(GOAL,23)}&lt;/pre&gt;&lt;br&gt;&lt;p&gt;Notice that going to &lt;strong&gt;&lt;em&gt;e&lt;/em&gt;&lt;/strong&gt; through &lt;strong&gt;&lt;em&gt;d&lt;/em&gt;&lt;/strong&gt; is cheaper than going to e directly. The value of &lt;strong&gt;&lt;em&gt;e&lt;/em&gt;&lt;/strong&gt; is updated from 9 to 5 and it moves up in &lt;strong&gt;PQ&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;There are two operations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;one for adding items to a queue.&lt;/li&gt;&lt;li&gt;one for removing items from a queue.&lt;/li&gt;&lt;/ul&gt;&lt;h6&gt;To learn more about the concept of priority queues, check out the following video:&lt;/h6&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://www.youtube.com/embed/wptevk0bshY?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0" data-bbtype="video" data-bbfile="{&amp;quot;src&amp;quot;:&amp;quot;https://www.youtube.com/embed/wptevk0bshY?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;,&amp;quot;alt&amp;quot;:&amp;quot;https://www.youtube.com/embed/wptevk0bshY?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&amp;quot;}"&gt;https://www.youtube.com/embed/wptevk0bshY?feature=oembed&amp;amp;wmode=opaque&amp;amp;rel=0&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;h5&gt;&lt;strong&gt;Uniform Cost Search Performance evaluation&amp;nbsp;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;As per the below figure, the UCS algorithm expands deep into the tree search:&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692656_1" data-bbtype="attachment" data-bbfile="{&amp;quot;alternativeText&amp;quot;:&amp;quot;UCS performance&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;M3_ucs_performance.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;}"&gt;M3_ucs_performance.png&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Based on the above figure, the complexity of uniform cost search is characterized in terms of:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;C* (the cost of the optimal solution)&amp;nbsp;&lt;/li&gt;&lt;li style="font-size: 1.125rem;
          padding-left: 1.487rem;"&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt; Îµ&lt;/span&gt;&lt;/span&gt; (the lower bound on the cost of each action), &lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt;Îµ&lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt;&amp;gt;0&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Accordingly the four performance measure explained in&amp;nbsp;&lt;a href="/bbcswebdav/courses/COMP237_INP.DEV.ZIP/web_resources/d2l/common/dialogs/quickLink/quickLink.d2l?ou=672556&amp;amp;type=content&amp;amp;rcode=CENCOL-2572303"&gt;Topic 3.2&lt;/a&gt;.,would be as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Completeness:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Yes it is complete, if &lt;strong&gt;&lt;em&gt;b&lt;/em&gt;&lt;/strong&gt; is a finite number and all action costs are &lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt;&amp;gt;=&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #000000"&gt;&lt;span style="font-size: 1.125rem;"&gt;Îµ &amp;gt;= 0 and&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Optimal:&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;Yes&lt;/li&gt;&lt;li&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Time complexity:&lt;/strong&gt;&lt;/span&gt; If m is finite, the time it takes to execute the search is&amp;nbsp;&lt;span style="color: #000000"&gt;&lt;strong&gt;O(b&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;1+[C*/&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;&lt;strong&gt;&lt;sup&gt;Îµ&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;&amp;nbsp;]&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;Space complexity:&lt;/strong&gt;&lt;/span&gt; It only expands if it has children on path to root, so &lt;span style="color: #000000"&gt;&lt;strong&gt;O(b&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;1+[C*/&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;span style="font-size: 0.875rem;"&gt;&lt;strong&gt;&lt;sup&gt;Îµ&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;&lt;sup&gt;&amp;nbsp;]&lt;/sup&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="@X@EmbeddedFile.requestUrlStub@X@bbcswebdav/xid-1692651_1" data-bbtype="attachment" data-bbfile="{&amp;quot;linkName&amp;quot;:&amp;quot;Avatar6.1.png&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;width&amp;quot;:289.8000183105469,&amp;quot;height&amp;quot;:289.8000183105469}"&gt;Avatar6.1.png&lt;/a&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;Note the average branching factor b is calculated as follows:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="color: #1c8845"&gt;&lt;span style="font-size: 1.125rem;"&gt;The average branching factor&amp;nbsp;(b) =&amp;nbsp;the number of non-root nodes / the number of non-leaf nodes.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;span style="color: #000000"&gt;&lt;strong&gt;UCS&lt;/strong&gt;&lt;/span&gt;&amp;nbsp;is optimal and &lt;span style="color: #1c8845"&gt;guarantees to find a solution&lt;/span&gt;, nevertheless it is &lt;span style="color: #000000"&gt;&lt;strong&gt;slow&lt;/strong&gt;&lt;/span&gt;&lt;span style="color: #000000"&gt; &lt;/span&gt;because it &lt;span style="color: #000000"&gt;&lt;strong&gt;spreads and considers&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt; &lt;/strong&gt;options in all directions.&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;h5&gt;References&lt;/h5&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Artificial intelligence a modern approach&lt;/strong&gt; by Stuart J. Russell and Peter Norvig. Chapter 3.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Hands-On Artificial Intelligence for Search&lt;/strong&gt; by Devangini Patel. Chapter 2.&lt;/li&gt;&lt;li&gt;UC Berkeley CS188 Intro to AI&amp;nbsp;&lt;a href="http://ai.berkeley.edu/home.html"&gt;http://ai.berkeley.edu/home.html&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wptevk0bshY"&gt;https://www.youtube.com/watch?v=wptevk0bshY&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/afs/andrew/course/15/381-f08/www/lectures/HandoutUninformedSearch.pdf"&gt;http://www.cs.cmu.edu/afs/andrew/course/15/381-f08/www/lectures/HandoutUninformedSearch.pdf&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</TEXT><TYPE
   value="H"/></BODY><DATES><CREATED value="2024-10-04 18:31:43 EDT"/><UPDATED value="2024-11-11 19:40:32 EST"/><START
   value=""/><END value=""/></DATES><FLAGS><ISAVAILABLE value="true"/><ISFROMCARTRIDGE value="false"/><ISFOLDER
   value="false"/><ISDESCRIBED value="false"/><ISTRACKED value="true"/><ISLESSON value="false"/><ISSEQUENTIAL
   value="false"/><ALLOWGUESTS value="true"/><ALLOWOBSERVERS value="true"/><LAUNCHINNEWWINDOW
   value="false"/><ISREVIEWABLE value="false"/><ISGROUPCONTENT value="false"/><ISSAMPLECONTENT
   value="false"/><PARTIALLYVISIBLE value="false"/><HASTHUMBNAIL value="false"/></FLAGS><CONTENTHANDLER
  value="resource/x-bb-document"/><RENDERTYPE value="REGULAR"/><FOLDERTYPE value=""/><URL value=""/><VIEWMODE
  value="TEXT_ICON_ONLY"/><OFFLINENAME value=""/><OFFLINEPATH value=""/><LINKREF value=""/><PARENTID
  value="_800500_1"/><REVIEWABLEREASON value="NONE"/><VERSION value="3"/><THUMBNAILALT value=""/><AISTATE
  value="No"/><AIACCEPTINGUSER value=""/><EXTENDEDDATA/><FILES/></CONTENT>
